type Query {
  me: UserType
  users: [UserType]
  myTeams: [TeamType]
  teams: [TeamType]
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  teamSet: [TeamType!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type TeamType {
  id: ID!
  createdAt: DateTime!
  createdBy: UserType
  modifiedAt: DateTime!
  deletedAt: DateTime
  name: String!
  members: [UserType!]!
}

type Mutation {
  register(input: RegisterInput!): RegisterPayload
  createTeam(input: CreateTeamInput!): CreateTeamPayload
  joinTeam(teamId: Int = null): JoinTeam
  leaveTeam(teamId: Int = null): LeaveTeam

  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String = null): Verify
  refreshToken(token: String = null): Refresh
}

type RegisterPayload {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """
  <ul><li>Your password can’t be too similar to your other personal information.</li><li>Your password must contain at least 8 characters.</li><li>Your password can’t be a commonly used password.</li><li>Your password can’t be entirely numeric.</li></ul>
  """
  password1: String!

  """Enter the same password as before, for verification."""
  password2: String!
  email: String
  errors: [ErrorType]
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input RegisterInput {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """
  <ul><li>Your password can’t be too similar to your other personal information.</li><li>Your password must contain at least 8 characters.</li><li>Your password can’t be a commonly used password.</li><li>Your password can’t be entirely numeric.</li></ul>
  """
  password1: String!

  """Enter the same password as before, for verification."""
  password2: String!
  email: String
  clientMutationId: String
}

type CreateTeamPayload {
  team: TeamType
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTeamInput {
  name: String!
  id: ID
  clientMutationId: String
}

type JoinTeam {
  team: TeamType
}

type LeaveTeam {
  team: TeamType
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}
