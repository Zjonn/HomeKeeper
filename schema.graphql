type Query {
  """Lists Tasks in the given team."""
  tasks(teamId: Int!, onlyActive: Boolean = false): [TaskType]

  """Lists TaskIntances in the given team."""
  taskInstances(teamId: Int!, onlyActive: Boolean = false): [TaskInstanceType]

  """Lists TaskIntances of the given task."""
  relatedTaskInstances(taskId: Int!, onlyActive: Boolean = false): [TaskInstanceType]

  """Lists history of TaskInsance completions in the given team."""
  completions(teamId: Int!): [TaskInstanceCompletionType]

  """
  Counts points for a given user in a given team.
              User has to be a member of the given team.
              Logged in user has to be member of the given team.
          
  """
  userPoints(userId: Int!, teamId: Int!, fromDatetime: DateTime = null, toDatetime: DateTime = null): Int

  """
  Counts points for each member of a given team.
              Logged in user has to be member of the given team.
          
  """
  teamMembersPoints(teamId: Int!, fromDatetime: DateTime = null, toDatetime: DateTime = null): [MemberPointsType]
  me: UserType
  myTeams: [TeamType]
  teams: [TeamType]
  teamMembers(teamId: Int = null): [UserType]
}

type TaskType {
  id: ID!
  name: String!
  description: String!
  team: TeamType
  basePointsPrize: Int!
  refreshInterval: String
  isRecurring: Boolean!
  active: Boolean
}

type TeamType {
  id: ID!
  createdAt: DateTime!
  createdBy: UserType
  modifiedAt: DateTime!
  deletedAt: DateTime
  name: String!
  members: [UserType!]!
  taskSet: [TaskType!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  profile: ProfileType
  teamSet: [TeamType!]!
  taskinstancecompletionSet: [TaskInstanceCompletionType!]!
}

type ProfileType {
  id: ID!
  imageId: String
  colorId: String
  user: UserType!
}

type TaskInstanceCompletionType {
  id: ID!
  createdAt: DateTime!
  createdBy: UserType
  modifiedAt: DateTime!
  deletedAt: DateTime
  taskInstance: TaskInstanceType!
  userWhoCompletedTask: UserType!
  pointsGranted: Int!
}

type TaskInstanceType {
  id: ID!
  task: TaskType!
  activeFrom: DateTime!
  completed: Boolean!
  active: Boolean
}

type MemberPointsType {
  member: UserType
  points: Int
}

type Mutation {
  createTask(input: TaskCreateGenericType!): TaskSerializerMutation
  updateTask(input: TaskUpdateGenericType!): TaskSerializerMutation
  deleteTask(
    """Django object unique identification field"""
    id: ID!
  ): TaskSerializerMutation
  submitTaskInstanceCompletion(input: TaskInstanceCompletionCreateGenericType!): TaskInstanceCompletionSerializerMutation
  revertTaskInstanceCompletion(
    """Django object unique identification field"""
    id: ID!
  ): TaskInstanceCompletionSerializerMutation
  register(input: RegisterInput!): RegisterPayload
  setProfileData(input: ProfileInput!): SetProfileData
  createTeam(input: CreateTeamInput!): CreateTeamPayload
  joinTeam(password: String = null, teamId: Int = null): JoinTeam
  leaveTeam(teamId: Int = null): LeaveTeam

  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String = null): Verify
  refreshToken(token: String = null): Refresh
}

"""DRF serializer based Mutation for Tasks."""
type TaskSerializerMutation {
  task: TaskType

  """Boolean field that return mutation result request."""
  ok: Boolean

  """Errors list for the field"""
  errors: [ErrorType]
}

type ErrorType {
  field: String!
  messages: [String!]!
}

"""Auto generated InputType for Task model"""
input TaskCreateGenericType {
  """base points prize"""
  basePointsPrize: Int!

  """name"""
  name: String!

  """team"""
  team: ID!

  """description"""
  description: String

  """is_recurring"""
  isRecurring: Boolean

  """refresh interval"""
  refreshInterval: Float
}

"""Auto generated InputType for Task model"""
input TaskUpdateGenericType {
  """Django object unique identification field"""
  id: ID!

  """name"""
  name: String

  """description"""
  description: String

  """team"""
  team: ID = null

  """base points prize"""
  basePointsPrize: Int

  """refresh interval"""
  refreshInterval: Float

  """"""
  isRecurring: Boolean
}

"""DRF serializer based Mutation for TaskInstanceCompletions."""
type TaskInstanceCompletionSerializerMutation {
  taskInstanceCompletion: TaskInstanceCompletionType

  """Boolean field that return mutation result request."""
  ok: Boolean

  """Errors list for the field"""
  errors: [ErrorType]
}

"""Auto generated InputType for TaskInstanceCompletion model"""
input TaskInstanceCompletionCreateGenericType {
  """task instance"""
  taskInstance: ID!
}

type RegisterPayload {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """
  <ul><li>Your password can’t be too similar to your other personal information.</li><li>Your password must contain at least 8 characters.</li><li>Your password can’t be a commonly used password.</li><li>Your password can’t be entirely numeric.</li></ul>
  """
  password1: String!

  """Enter the same password as before, for verification."""
  password2: String!
  email: String
  errors: [ErrorType]
  clientMutationId: String
}

input RegisterInput {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """
  <ul><li>Your password can’t be too similar to your other personal information.</li><li>Your password must contain at least 8 characters.</li><li>Your password can’t be a commonly used password.</li><li>Your password can’t be entirely numeric.</li></ul>
  """
  password1: String!

  """Enter the same password as before, for verification."""
  password2: String!
  email: String
  clientMutationId: String
}

type SetProfileData {
  profile: ProfileType
}

input ProfileInput {
  userId: ID
  imageId: String
  colorId: String
}

type CreateTeamPayload {
  team: TeamType
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTeamInput {
  name: String!

  """Password used to join the team"""
  password: String!
  id: ID
  clientMutationId: String
}

type JoinTeam {
  team: TeamType
}

type LeaveTeam {
  team: TeamType
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}
